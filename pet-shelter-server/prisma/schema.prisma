// Указываем провайдера и подключение
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Удалена модель UserTypes
// Описание таблицы Users
model Users {
  ID           Int      @id @default(autoincrement())
  UserName     String   @unique
  Password     String
  Email        String   @unique
  PhoneNumber  String?  @unique
  Role         String 
  isBanned     Int

  // Обратная связь с AdoptionRequest
  AdoptionRequests AdoptionRequest[] // Это обратная связь для AdoptionRequest
}

// Описание таблицы PetShelter
model PetShelter {
  ID          Int      @id @default(autoincrement())
  Name        String   @unique
  Address     String   @unique
  Email       String   @unique
  Password    String
  Description String
  isBanned    Int
  Country     String
  City        String
  Animals     Animal[]
}

// Описание таблицы AnimalType
model AnimalType {
  ID          Int      @id @default(autoincrement())
  TypeName    String   @unique
  Description String
  Diseases    AnimalTypeDiseases[]
  Animals     Animal[]
}

// Описание таблицы Diseases
model Diseases {
  ID          Int      @id @default(autoincrement())
  Name        String   @unique
  Description String
  AnimalTypes AnimalTypeDiseases[]
  Animals     AnimalDiseases[]
}

// Описание таблицы AnimalTypeDiseases
model AnimalTypeDiseases {
  ID           Int        @id @default(autoincrement())
  AnimalTypeId Int
  DiseasesId   Int

  // Связи
  AnimalType   AnimalType @relation(fields: [AnimalTypeId], references: [ID])
  Diseases     Diseases   @relation(fields: [DiseasesId], references: [ID])

  // Композитный уникальный индекс
  @@unique([AnimalTypeId, DiseasesId])
}

// Описание таблицы Animal
model Animal {
  ID           Int       @id @default(autoincrement())
  PetShelterId Int?
  AnimalTypeId Int
  Name         String
  Description  String
  Age          Int
  Gender       String
  Archived     Int
  ImageUrl     String

  // Связи
  PetShelter   PetShelter? @relation(fields: [PetShelterId], references: [ID])
  AnimalType   AnimalType  @relation(fields: [AnimalTypeId], references: [ID])
  Diseases     AnimalDiseases[]
  Criteria     AnimalCriteria[]
  AdoptionRequests AdoptionRequest[]
}

// Описание таблицы AnimalDiseases
model AnimalDiseases {
  ID         Int     @id @default(autoincrement())
  AnimalId   Int
  DiseasesId Int

  // Связи
  Animal     Animal   @relation(fields: [AnimalId], references: [ID])
  Diseases   Diseases @relation(fields: [DiseasesId], references: [ID])

  // Композитный уникальный индекс
  @@unique([AnimalId, DiseasesId])
}

// Описание таблицы AdoptionRequest
model AdoptionRequest {
  ID          Int    @id @default(autoincrement())
  AnimalId    Int
  UserId      Int
  isProcessed Int
  description String
  answer      String?

  // Связи
  Animal      Animal @relation(fields: [AnimalId], references: [ID])
  User        Users  @relation(fields: [UserId], references: [ID])
}

// Описание таблицы Criteria
model Criteria {
  ID          Int      @id @default(autoincrement())
  Name        String   @unique
  Description String
  Animals     AnimalCriteria[]
}

// Описание таблицы AnimalCriteria
model AnimalCriteria {
  ID         Int      @id @default(autoincrement())
  AnimalId   Int
  CriteriaId Int

  // Связи
  Animal     Animal   @relation(fields: [AnimalId], references: [ID])
  Criteria   Criteria @relation(fields: [CriteriaId], references: [ID])

  // Композитный уникальный индекс
  @@unique([AnimalId, CriteriaId])
}

model Notification {
  ID               Int      @id @default(autoincrement())
  TelegramChatId   Int
  City             String
  Country          String
}